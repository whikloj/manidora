<?php

/**
 * @file
 * Custom University of Manitoba hacks for Islandora.
 */

// Includes functions for blocks.
require_once dirname(__FILE__) . '/includes/blocks.inc';

/**
 * API call to insert a link to a printer friendly version of something.
 *
 * @param string $path
 *   path to page we want a printer friendly version of
 */
function manidora_print_insert_link($path) {
  return l(t("Printer Friendly Version"), $path, array('attributes'=>array('class'=>array('print-link'))));
}

/**
 * Implements hook_preprocess_print().
 *
 * Strips out unneccessary content and adds MODS metadata below the object.
 */
function manidora_preprocess_print(&$variables) {
  // Get the DOM.
  $content_dom = new DOMDocument();
  $content_dom->loadHTML($variables["print"]["content"]);

  //
  // Get just the content we want.
  // We're looking for the 'content' divs.
  //
  $divs = $content_dom->getElementsByTagName("div");
  $found = FALSE;
  for ($i = 0; $i < $divs->length && !$found; $i++) {
    if ($divs->item($i)->hasAttribute("class") &&
        ($divs->item($i)->getAttribute("class") == "islandora-basic-image-content" ||
        $divs->item($i)->getAttribute("class") == "islandora-large-image-content" ||
        $divs->item($i)->getAttribute("class") == "islandora-newspaper-content")
    ) {
      // Replace original content with just the stripped out 'content' div.
      $variables["print"]["content"] = $content_dom->saveHTML($divs->item($i));
      $found = TRUE;
    }
  }

  //
  // Append the MODS metadata to the end of the content.
  //
  if ($found) {
    // Hack out the PID from the URL.
    $url = $variables["print"]["url"];
    $explode_results = explode("/islandora/object/", $url);

    if (count($explode_results) > 1) {
      $pid = $explode_results[1];
    }
    else {
      $pid = $explode_results[0];
    }

    $pid = urldecode($pid);

    // Use the PID to get the Islandora object.
    $islandora_object = islandora_object_load($pid);

    // Append the MODS metadata list to the end of the content to be themed by
    // the printer friendly module.
    if ($islandora_object['MODS']) {
      $metadata = manidora_retrieve_metadata_form($islandora_object);
      $variables["print"]["content"] .= "<br/>" . drupal_render($metadata);
    }
  }
}

/**
 * Implements hook_menu().
 */
function manidora_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manitoba_metadata'] = array(
    'title' => 'Details',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'manidora_retrieve_metadata_form',
    'page arguments' => array(2),
    'access callback' => 'manidora_metadata_access',
    'access arguments' => array(2),
    'weight' => 1,
  );
  $items['islandora/object/%islandora_object/manitoba_download'] = array(
    'title' => 'Download',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'manidora_download_table',
    'page arguments' => array(2),
    'access callback' => 'manidora_download_access',
    'access arguments' => array(2),
    'weight' => 2,
  );
  $items['islandora/manitoba/newspaper_search'] = array(
    'title' => 'Manitoba Advanced Newspaper Search',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manidora_newspaper_search_form'),
    'access arguments' => array(FEDORA_VIEW_OBJECTS),
  );
  $items['admin/islandora/manidora'] = array(
    'title' => t('Manidora'),
    'description' => t('Configure the UofM customization module!'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/manidora/settings'] = array(
    'title' => 'Manidora',
    'description' => 'Configure the UofM customization module.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('manidora_admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/manitoba/pdf/print'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'manidora_printable_pdf',
    'page arguments' => array(4, NULL),
    'access arguments' => array(FEDORA_VIEW_OBJECTS),
  );
  $items['islandora/object/%islandora_object/manidora_download_clip'] = array(
    'page callback' => 'manidora_download_clip',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_object_access_callback',
    'access arguments' => array(FEDORA_VIEW_OBJECTS, 2),
    'load arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/manidora_download_clip_pdf'] = array(
    'page callback' => 'manidora_download_clip_pdf',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_object_access_callback',
    'access arguments' => array(FEDORA_VIEW_OBJECTS, 2),
    'load arguments' => array(2),
  );
  $items['admin/islandora/manidora/homepage'] = array(
    'title' => t('Manidora Homepage images'),
    'description' => t('Configure the selected homepage thumbnails.'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('manidora_homepage_thumbnail_admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/manidora/homepage/%/remove'] = array(
    'title' => t('Manidora Homepage images - removal PID path'),
    'page callback' => 'manidora_homepage_thumbnail_remove',
    'page arguments' => array(4),
    'type'=> MENU_CALLBACK,
    'access arguments' => array('administer site configuration'),
  );
  
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Do the ol' switcharooney on the menu entry for the islandora_fits
 * module so that UofM can continue their tabish lifestyles.
 */
function manidora_menu_alter(&$items) {
  if (module_exists('islandora_fits')) {
    $fits_tab = $items['islandora/object/%islandora_object/manage/fits_metadata'];
    $items['islandora/object/%islandora_object/fits_metadata'] = $fits_tab;
    $items['islandora/object/%islandora_object/fits_metadata']['weight'] = 3;
    $items['islandora/object/%islandora_object/fits_metadata']['access callback'] = 'manidora_technical_metadata_access';
    unset($items['islandora/object/%islandora_object/manage/fits_metadata']);
  }
}

/**
 * Fetches MODS metadata as form encoded markup.
 *
 * @param AbstractObject $object
 *   The object you wish to retrive formatted metadata from
 */
function manidora_retrieve_metadata_form(AbstractObject $object) {
  drupal_set_title($object->label . " Metadata");
  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  drupal_set_breadcrumb(islandora_get_breadcrumbs($object));
  $output = '';
  $form = array();
  // Video and audio objects get PBCORE.
  if (array_intersect(array('islandora:sp_videoCModel', 'islandora:sp-audioCModel'), $object->models)) {
    $output = manidora_pbcore_metadata($object);
  }
  // Grab MODS otherwise.
  else {
    $output = manidora_mods_transform($object);
  }
  if (!empty($output)) {
    $form = array(
      '#type' => 'item',
      '#markup' => $output,
      '#weight' => 10,
    );
  }
  else {
    drupal_set_message(t('A transformation error has occured!'), 'error');
  }
  return $form;  
}

/**
 * Implements hook_access().
 */
function manidora_metadata_access(AbstractObject $object) {
  if (!in_array('islandora:collectionCModel', $object->models)) {
    if (array_intersect(array('islandora:sp_videoCModel', 'islandora:sp-audioCModel'), $object->models)) {
      if (isset($object['PBCORE'])) {
        return TRUE;
      }
    }
    else {
      if (isset($object['MODS'])) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Overwrites the islandora_fits_access() function for use in Manidora.
 *
 * @param IslandoraObject $object
 *   An instansiated IslandoraObject.
 *
 * @return bool
 *   Access or not.
 */
function manidora_technical_metadata_access($object) {
  $allowed_models = array('islandora:sp_basic_image', 'islandora:sp_large_image_cmodel');

  if ($object[variable_get('islandora_fits_techmd_dsid', 'TECHMD')] && user_access('view technical metadata') && count(array_intersect($allowed_models, $object->models))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_access().
 * @TODO: Expand on the restriction?
 */
function manidora_download_access($object) {
  if (!in_array('islandora:collectionCModel', $object->models)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Utility function that runs an xslt on MODS metadata.
 *
 * The transform was straight jacked from U of M's D6 site.
 *
 * @param IslandoraObject $object
 *   The IslandoraObject whose MODS metadata you wish to transform.
 */
 function manidora_mods_transform($object) {
   module_load_include('inc', 'islandora', 'includes/utilities'); // To get the islandora functions

   $mods_text = $object->repository->api->a->getDatastreamDissemination($object->id, 'MODS');
   $parent_collections = islandora_get_parents_from_rels_ext($object);

   if ($parent_collections){
     $collections = "";
     foreach ($parent_collections as $c){
       $collections .= l($c->label,'islandora/objects/'.$c->id) . "<br />";
     }
   }

   if ($mods_text) {
     if (in_array('islandora:bookCModel', $object->models)) {
       $rows = array();
       $mods_xml = new SimpleXMLElement($mods_text);

       $mods_xml->registerXPathNamespace('mods', 'http://www.loc.gov/mods/v3');

       // Title info.
       $title_results = $mods_xml->xpath('/mods:mods/mods:titleInfo/mods:title');
       $title = (string) reset($title_results);

       if (!empty($title)) {
         $rows[] = array('Field' => t('Title'), 'Value' => $title);
       }

       if (!empty($collections)){
         $rows[] = array(t('Collections'),$collections);
       }

       $description_results = $mods_xml->xpath('/mods:mods/mods:abstract');
       $description = (string) reset($description_results);

       if (!empty($description)){
         $rows[] = array(t('Description'),$description);
       }

       $format_res = $mods_xml->xpath('/mods:mods/mods:typeOfResource');
       $format = (string) reset($format_res);
       if (!empty($format)){
         $rows[] = array(t('Format'),$format);
       }

       $date_res = $mods_xml->xpath('/mods:mods/mods:subject/mods:temporal');
       $date = (string) reset($date_res);
       if (!empty($date)){
         $rows[] = array(t('Date'),$date);
       }

       $subtitle_results = $mods_xml->xpath('/mods:mods/mods:titleInfo/mods:subTitle');
       $subtitle = (string) reset($subtitle_results);

       if (!empty($subtitle)) {
         $rows[] = array(t('Subtitle'), $subtitle);
       }

       $authors = array();

       // Authors.
       foreach ($mods_xml->name as $name_xml) {
         $name_parts = array();
         $role = (string) @$name_xml->role->roleTerm;
         if ($role) {
           if ($role == 'author') {
             foreach ($name_xml->namePart as $name_part) {
               if ((string) $name_part != '') {
                 // Strip periods off the end.
                 $np = (string) rtrim($name_part, '.');
                 if ($name_part['type'] == 'given') {
                   $name_parts['first_name'] = (string) $name_part;
                 }
                 if ($name_part['type'] == 'family') {
                   $name_parts['last_name'] = $np;
                 }
               }
             }
           }
           if (isset($names_parts['last_name']) && isset($name_parts['first_name'])) {
             $authors[] = $name_parts['first_name'] . ' ' . $name_parts['last_name'];
           }
         }
       }
       $author_markup = '';
       foreach ($authors as $author) {
         if (empty($author)) {
           $author_markup = $author;
         }
         else {
           $author_markup .= '<br/>' . $author;
         }
       }

       if (!empty($author_markup)) {
         $rows[] = array(t('Author'), $author_markup);
       }

       // Origin Info.
       $place_results = $mods_xml->xpath('/mods:mods/mods:originInfo/mods:place/mods:placeTerm');
       $place = (string) reset($place_results);

       if (!empty($place)) {
         $rows[] = array(t('Place'), $place);
       }

       $publisher_results = $mods_xml->xpath('/mods:mods/mods:originInfo/mods:publisher');
       $publisher = (string) reset($publisher_results);

       if (!empty($publisher)) {
         $rows[] = array(t('Publisher'), $publisher);
       }

       $date_results = $mods_xml->xpath('/mods:mods/mods:originInfo/mods:dateIssued');
       $date = (string) reset($date_results);

       if (!empty($date)) {
         $date_format = new DateTime($date);
         $rows[] = array(t('Date Issued'), date_format($date_format, 'Y-m-d'));
       }

       // Physical Description.
       $physical_results = $mods_xml->xpath('/mods:mods/mods:physicalDescription/mods:extent');
       $physical = (string) reset($physical_results);

       if (!empty($physical)) {
         $rows[] = array(t('Physical Description'), $physical);
       }

       // Record Info.
       $record_id_results = $mods_xml->xpath('/mods:mods/mods:recordInfo/mods:recordIdentifier');
       $record_id = (string) reset($record_id_results);

       if (!empty($record_id)) {
         $rows[] = array(t('Record ID'), $record_id);
       }

       $content_source_results = $mods_xml->xpath('/mods:mods/mods:recordInfo/mods:recordContentSource');
       $content_source = (string) reset($content_source_results);

       if (!empty($content_source)) {
         $rows[] = array(t('Content Source'), $content_source);
       }

       $language_results = $mods_xml->xpath('/mods:mods/mods:recordInfo/mods:languageofCataloging');
       $language = (string) reset($language_results);

       if (!empty($language)) {
         $rows[] = array(t('Language'), $language);
       }

       // Identifier.
       $identifier_results = $mods_xml->xpath('/mods:mods/mods:identifier');
       $identifier = (string) reset($identifier_results);

       if (!empty($identifier)) {
         $rows[] = array(t('Identifier'), $identifier);
       }

       // Table markup.
       $headers = array('Field' => t('Field'), 'Value' => t('Value'));
       $markup = theme_table(array(
         'header' => $headers,
         'rows' => $rows,
         'attributes' => array(),
         'caption' => '',
         'colgroups' => array(),
         'sticky' => TRUE,
         'empty' => t('No MODS present!')));
       return $markup;
     }
     else {
       $xslt_processor = new XSLTProcessor();
       $xsl = new DOMDocument();
       $file = drupal_get_path('module', 'manidora') . '/xsl/manidora_mods2html.xsl';
       $xsl->load($file);
       $input = new DOMDocument();

       $did_load = $input->loadXML($mods_text);

       if ($did_load) {
         global $base_url;
         $xslt_processor->registerPHPFunctions(); // Using PHP functions to inject the collections HTML into the XSL
         $xslt_processor->importStylesheet($xsl);
         $xslt_processor->setParameter('', array(
           'islandoraUrl' => $base_url,
           'collections' => '<span>'.$collections.'</span>', // 
         ));
         $mods_transformed = $xslt_processor->transformToXml($input);
         return manidora_print_insert_link('print/islandora/object/'.$object->id."/manitoba_metadata") .$mods_transformed;
       }
       else {
         return FALSE;
       }
     }
   }
   else {
     return FALSE;
   }
 }

/**
 * Generates a table of all downloadable datastreams for an IslandoraObject.
 *
 * Used in the "Download" tab.
 *
 * @param IslandoraObject $islandora_object
 *   The object whose datastreams you wish to download.
 *
 * @return array
 *   Returns a table containing all the datastreams.
 */
function manidora_download_table($islandora_object) {
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');

  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  drupal_set_breadcrumb(islandora_get_breadcrumbs($islandora_object));

  drupal_set_title($islandora_object->label ." Downloads");

  $headers = array(
    'ID' => t('ID'),
    'label' => t('Label'),
    'mime' => t('Mime type'),
    'size' => t('Size'),
    'download' => t('Download'),
  );

  foreach ($islandora_object as $ds) {
    if ($ds->size > 0) {
      $rows[] = array(
        'ID' => l($ds->id, islandora_datastream_get_url($ds, 'view')),
        'label' => $ds->label,
        'mime' => $ds->mimeType,
        'size' => islandora_datastream_get_human_readable_size($ds),
        'download' => l(t('download'), islandora_datastream_get_url($ds, 'download')),
      );
    }
  }
  
  // We want TIFFS, JPEG and PDFs at the top of the Downloads list.
  $topA = array();
  $bottomA = array();
  foreach ($rows as $row){
    if (preg_match('/>(JPG|PDF|TIFF|OBJ)</',$row['ID'])){
      array_push($topA,array('data'=>$row, 'class'=>array('important-download')));
    } else {
      array_push($bottomA,array('data'=>$row));
    }
  }
  sort($topA);
  sort($bottomA);
  $rows = array_merge($topA,$bottomA);
  
  $table = array(
    '#theme' => 'table',
    '#header' => $headers,
    '#rows' => $rows,
  );
  return $table;
}

/**
 * Creates the custom search form for searching Manitoba's newspapers.
 *
 * @TODO: Limit searches based upon newspapers only.
 *
 * @param array $form
 *   The form to construct
 *
 * @param array $form_state
 *   Its state
 *
 * @return array
 *   The constructed form
 */
function manidora_newspaper_search_form($form, &$form_state) {
  $form = array(
    'exact_phrase' => array(
      '#type' => 'textfield',
      '#title' => t('With the exact phrase'),
    ),
    'least_one' => array(
      '#type' => 'textfield',
      '#title' => t('With at least one of the words'),
    ),
    'without_words' => array(
      '#type' => 'textfield',
      '#title' => t('Without all the words'),
    ),
    'all_words' => array(
      '#type' => 'textfield',
      '#title' => t('With all of the words'),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#submit' => array('manidora_newspaper_search_form_submit'),
    ),
  );
  return $form;
}

/**
 * Submit handler for the manidora_newspaper_search_form.
 *
 * Redirects to the islandora/solr/search menupath to execute the
 * given query.
 *
 * @param array $form
 *   The form to submit
 * @param array $form_state
 *   Its state
 */
function manidora_newspaper_search_form_submit($form, &$form_state) {
  $query_string = '';

  if (strlen($form_state['values']['all_words']) > 0) {
    $all_words = $form_state['values']['all_words'];
    $all_array = explode(' ', $all_words);

    $count = 0;
    foreach ($all_array as $word) {
      if ($count == 0) {
        $query_string .= '(' . $word;
      }
      else {
        $query_string .= ' && ' . $word;
      }
      $count++;
    }
    $query_string .= ')';
  }

  if (strlen($form_state['values']['exact_phrase']) > 0) {
    $exact_phrase = $form_state['values']['exact_phrase'];
    $exact_phrase = '"' . $exact_phrase . '"';

    if (!strlen($query_string)) {
      $query_string .= '(' . $exact_phrase . ')';
    }
    else {
      $query_string .= ' && (' . $exact_phrase . ')';
    }
  }

  // "x" or field:"y" or field:"z"
  if (strlen($form_state['values']['least_one']) > 0) {
    $least_one = $form_state['values']['least_one'];
    $least_array = explode(' ', $least_one);
    $count = 0;
    if (strlen($query_string)) {
      $query_string .= ' && ';
    }
    foreach ($least_array as $word) {
      if ($count == 0) {
        $query_string .= '(' . $word;
      }
      else {
        $query_string .= ' || ' . $word;
      }
      $count++;
    }
    $query_string .= ')';
  }

  // Negative of "with all of the words"
  if (strlen($form_state['values']['without_words']) > 0) {
    $without_words = $form_state['values']['without_words'];
    $without_array = explode(' ', $without_words);
    $count = 0;
    if (strlen($query_string)) {
      $query_string .= ' && ';
    }
    foreach ($without_array as $word) {
      if ($count == 0) {
        $query_string .= '-(' . $word;
      }
      else {
        $query_string .= ' && ' . $word;
      }
      $count++;
    }
    $query_string .= ')';
  }
  $query_string = str_replace('/', '~slsh~', $query_string);
  $query = array(
    'type' => 'edismax',
    'hidden_filter' => array('+RELS_EXT_hasModel_uri_ms:("info:fedora/islandora:newspaperPageCModel" "info:fedora/islandora:newspaperCModel" "info:fedora/islandora:newspaperIssueCModel")'),
  );
  drupal_goto('islandora/search/' . $query_string, array(
    'query' => $query,
  ));
}

/**
 * Admin form definition.
 */
function manidora_admin($form, &$form_state) {
  $form = array();

  $form['manidora_collection_solr_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Collection Solr Field'),
    '#description' => t("Holds the collection Solr field."),
    '#default_value' => variable_get('manidora_collection_solr_field', 'RELS_EXT_isMemberOfCollection_uri_ms'),
    '#size' => 30,
  );
  $form['manidora_secondary_collection_solr_field'] = array(
    '#type' => 'textfield',
    '#title' => t('Secondary Membership Solr Field'),
    '#description' => t('A Solr field; assumed to be "@pid_structure".', array('@pid_structure' => 'info:fedora/<pid>')),
    '#default_value' => variable_get('manidora_secondary_collection_solr_field', 'RELS_EXT_isMemberOf_uri_ms'),
    '#size' => 30,
  );

  return system_settings_form($form);
}

/**
 * Preprocessor for newspaper_page, removes some controls.
 */
function manidora_preprocess_islandora_newspaper_page_controls(&$variables) {
  unset($variables['controls']['jp2_download']);
  unset($variables['controls']['view']);
  unset($variables['controls']['pdf_download']);
}

/**
 * Constructs a printable PDF from the JPG datastream with header content.
 *
 * @param string $pid
 *   A PID representing a Fedora object.
 *
 * @return string
 *   Download link containing our created PDF.
 */
function manidora_printable_pdf($pid, $url = NULL) {
  @include_once 'sites/all/libraries/tcpdf/config/lang/eng.php';
  @include_once 'sites/all/libraries/tcpdf/tcpdf.php';

  // Extend the TCPDF class to create custom Header and Footer.
  class MYPDF extends TCPDF {

    /**
     * Constructor.
     */
    public function __construct($pid, $orientation = 'P', $unit = 'mm', $format = 'A4', $unicode = TRUE, $encoding = 'UTF-8', $diskcache = FALSE, $pdfa = FALSE) {
      $this->pid = $pid;
      parent::__construct($orientation, $unit, $format, $unicode, $encoding, $diskcache);
    }

    /**
     * Page header.
     */
    public function Header() {
      $string = manidora_retrieve_header_text($this->pid);
      if ($string) {
        $this->Cell(0, 15, $string, 0, FALSE, 'C', 0, '', 0, FALSE, 'M', 'M');
      }
    }
  }
  // Create new PDF document.
  $pdf = new MYPDF($pid, PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, TRUE, 'UTF-8', FALSE);

  $header_text = manidora_retrieve_header_text($pid);
  if ($header_text) {
    // Parse a bit for use below.
    $header_parts = explode(',', $header_text);
    $title = $header_parts[0];
  }
  else {
    $title = $pid;
    $header_text = $pid;
  }
  // Set document information.
  $pdf->SetTitle($title);
  $pdf->SetSubject($title);

  // Set default monospaced font.
  $pdf->SetDefaultMonospacedFont(PDF_FONT_MONOSPACED);

  // Set margins.
  $pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
  $pdf->SetHeaderMargin(PDF_MARGIN_HEADER);

  // Set auto page breaks.
  $pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);

  // Set image scale factor.
  $pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);

  // Set some language-dependent strings.
  $pdf->setLanguageArray($l);

  // Set font.
  $pdf->SetFont('times', 'BI', 12);

  // If no url was provided (e.g. we're not coming from the clipper),
  // check to see if there's a high quality jpeg derivative.  If it does not
  // exist, default to the standard JPG datastream.
  if (!isset($url)) {
    $obj = islandora_object_load($pid);
    $dsid = isset($obj['HQ_JPG']) ? 'HQ_JPG' : 'JPG';
    $url = variable_get('islandora_base_url', 'http://localhost:8080/fedora') . '/objects/' . $pid . '/datastreams/' . $dsid . '/content';
  }

  // Add a page.
  $pdf->AddPage();
  // Add the image.
  // Gotta specify almost ALL the parameters to get to the 'fitonpage'
  // parameter.  This should fix weird clipping issues between the actual image
  // source and what gets embedded into the PDF.
  $pdf->Image($url, '0', '15', 0, 0, '', '', '', 2, 300, '', FALSE, FALSE, 0, FALSE, FALSE, TRUE);

  // Close and output PDF document.
  $pdf->Output($header_text . '.pdf', 'D');
}

/**
 * Constructs the text used in the header of the PDF.
 *
 * @param string $pid
 *   A PID representing a Fedora object.
 *
 * @return string
 *   Formatted string for output display.
 */
function manidora_retrieve_header_text($pid) {
  $object = islandora_object_load($pid);
  if (isset($object['MODS'])) {
    $mods = $object['MODS']->content;
    $xml = new SimpleXMLElement($mods);

    $title = '';
    $date = '';
    $page = '';

    if (in_array('islandora:newspaperPageCModel', $object->models) && isset($xml->relatedItem)) {
      if (isset($xml->relatedItem->titleInfo)) {
        if (isset($xml->relatedItem->titleInfo->title)) {
          $title = (string) $xml->relatedItem->titleInfo->title;
        }
      }
    }

    if (empty($title) && isset($xml->titleInfo)) {
      if (isset($xml->titleInfo->title)) {
        $title = (string) $xml->titleInfo->title;
        $title = preg_replace('/:(.*)/', '', $title);
      }
    }
    if (empty($title)) {
      $title = t('Unknown');
    }

    if (isset($xml->relatedItem)) {
      if (isset($xml->relatedItem->part)) {
        if (isset($xml->relatedItem->part->date)) {
          $date = $xml->relatedItem->part->date;
        }
        if (isset($xml->relatedItem->part->extent)) {
          if (isset($xml->relatedItem->part->extent->start)) {
            $page = $xml->relatedItem->part->extent->start;
          }
        }
      }
    }

    if (empty($date)) {
      $date = t('Unknown');
    }

    if (empty($page)) {
      $page = t('Unknown');
    }
    $text = $title . ', ' . $date . ' (Page ' . $page . ')';
    return $text;
  }
  else {
    return FALSE;
  }
}

/**
 * Gets the title of the object for display.
 *
 * Newspapers have specialized titles.
 *
 * @param AbstractObject $object
 *   The object from which to derive the title.
 */
function manidora_get_title(AbstractObject $object) {
  $models = $object->models;
  $retrieve_title = in_array('islandora:newspaperPageCModel', $models);
  return $retrieve_title ? manidora_retrieve_header_text($object->id) : $object->label;
}

/**
 * Gets the title to display for the given newspaper page or newspaper.
 */
function manidora_set_title(AbstractObject $object) {
  drupal_set_title(manidora_get_title($object));
}

/**
 * Implements hook_islandora_view_object().
 */
function manidora_islandora_view_object_alter(AbstractObject $object) {
  manidora_set_title($object);
}

/**
 * Implements hook_process_theme().
 */
function manidora_process_islandora_object_print(array &$variables) {
  $object = $variables['object'];
  if (in_array('islandora:newspaperPageCModel', $object->models)) {
    drupal_add_css(drupal_get_path('module', 'manidora') . '/css/manidora.print.css');
    manidora_set_title($object);
    $clip = isset($variables['clip']) ? $variables['clip'] : NULL;
    $variables['content']['buttons']['1'] = array(
      '#markup' => ' | ',
      '#weight' => -5,
    );
    $variables['content']['buttons']['download_pdf'] = array(
      '#prefix' => '<strong>',
      '#markup' => l(t('Download PDF'), "islandora/object/{$object->id}/manidora_download_clip_pdf", array(
        'query' => array('clip' => $clip))),
      '#suffix' => '</strong>',
      '#weight' => -5,
    );
  }
  elseif (in_array('islandora:sp_large_image_cmodel', $object->models)) {
    drupal_add_css(drupal_get_path('module', 'manidora') . '/css/manidora.print.css');
    $variables['content']['metadata'] = manidora_retrieve_metadata_form($object);
  }
}

/**
 * Menu callback downloads the given clip.
 */
function manidora_download_clip_pdf(AbstractObject $object) {
  if (isset($_GET['clip'])) {
    $is_https = isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';
    $http_protocol = $is_https ? 'https' : 'http';
    $url = $http_protocol . '://' . $_SERVER['HTTP_HOST'] . $_GET['clip'];
    manidora_printable_pdf($object->id, $url);
  }
  exit();
}

/**
 * Alter the image upload forms, to allow a flag to be set for OCR.
 */
function manidora_form_alter(&$form, &$form_state, $form_id) {
  $forms_to_modify = array(
    'islandora_basic_image_image_upload_form',
    'islandora_large_image_image_upload_form',
  );
  if (in_array($form_id, $forms_to_modify) && module_exists('islandora_ocr')) {
    // XXX: Weighted form elements would be preferable to slicing... anyway.
    $original_form = $form;
    $form = array_slice($original_form, 0, -2);
    $form += array(
      'ocr_checkbox' => array(
        '#type' => 'checkbox',
        '#title' => t('OCR image'),
        '#description' => t('Flag the image to be run through OCR during the ingest process.'),
      ),
    );
    $form += array_slice($original_form, -2);

    array_unshift($form['next']['#submit'], 'manidora_ocr_flag_submit');
  }
  elseif ($form_id == 'xml_form_builder_ingest_form' || $form_id == 'xml_form_builder_edit_datastream_form') {
    module_load_include('inc', 'manidora', 'includes/creative_commons');
    manidora_creative_commons_form($form, $form_state);
  }
}

/**
 * Submit handler; add RELS-EXT statement if we should OCR an image.
 */
function manidora_ocr_flag_submit($form, &$form_state) {
  if ($form_state['values']['ocr_checkbox']) {
    $object = reset($form_state['islandora']['objects']);
    $object->relationships->add(ISLANDORA_RELS_EXT_URI, 'doImageOCR', 'true', 1);
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 *
 * Generates a high-quality jpeg derivative datastream (HQ_JPG) for embedding
 * into PDF's.
 */
function manidora_islandora_newspaperPageCModel_islandora_object_ingested($object) {
  module_load_include('inc', 'islandora_large_image', 'includes/derivatives');
  $base_name = str_replace(':', '-', $object->id);
  $uploaded_file = islandora_large_image_get_uploaded_file($object, $base_name);
  $args = array();
  $args[] = '-quality ' . escapeshellarg('25%');
  $derivative_file = islandora_large_image_imagemagick_convert($uploaded_file, "temporary://{$base_name}_HQ_JPG.jpg", $args);
  if ($derivative_file === FALSE) {
    drupal_set_message(t('Failed to create HQ_JPG derivative'), 'error');
    file_unmanaged_delete($uploaded_file);
    return FALSE;
  }
  islandora_large_image_add_datastream($object, 'HQ_JPG', $derivative_file, 'image/jpeg', t('High quality JPEG'));
  file_unmanaged_delete($derivative_file);
  file_unmanaged_delete($uploaded_file);

  return TRUE;
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_alter().
 */
function manidora_islandora_datastream_ingested($object, $datastream) {
  $image_content_models = array(
    'islandora:sp_large_image_cmodel',
    'islandora:sp_basic_image',
  );
  if ($datastream->id == 'OBJ' && array_intersect($object->models, $image_content_models)) {
    // We are changing an image...
    if ($object->relationships->get(ISLANDORA_RELS_EXT_URI, 'doImageOCR', 'true', 1)) {
      // We have our flag set, let's go!
      module_load_include('inc', 'islandora_ocr', 'includes/derivatives');
      islandora_ocr_derive_datastreams($datastream, array());
    }
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_solr_object_result_alter().
 *
 * Puts the Solr query terms into the object URL so that viewers can use them
 * for highlighting.
 */
function manidora_islandora_sp_large_image_cmodel_islandora_solr_object_result_alter(&$search_results, $query_processor) {
  $search_results['object_url_params']['solr'] = array(
    'query' => $query_processor->solrQuery,
    'params' => $query_processor->solrParams,
  );
}

/**
 * Implements hook_preprocess_page().
 */
function manidora_preprocess_page(&$variables) {
  $arg1 = arg(1);
  $arg2 = arg(2);

  if ($arg1 == 'object' && islandora_is_valid_pid($arg2)) {

    // Get compound children.
    $children = islandora_compound_object_get_parts($arg2);
    $pid = (!empty($children)) ? $children[0] : $arg2;

    if ($object = islandora_object_load($pid)) {
      $rels_predicate = variable_get('islandora_compound_object_relationship', 'isPartOf');
      $part_of = $object->relationships->get('info:fedora/fedora-system:def/relations-external#', $rels_predicate);
      // This object is part of a compound object.
      if (!empty($part_of)) {
        $variables['title'] = '';
      }
    }
  }
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object_alter().
 *
 * Get rid of the default collection view--we render our desired view with Solr
 * in manidora_islandora_collectioncmodel_islandora_view_object().
 */
function manidora_islandora_collectioncmodel_islandora_view_object_alter(AbstractObject &$object, &$views) {
  unset($views['Collection View']);
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 *
 * Render Solr results for a collection, to be used instead of the default
 * collection display.
 */
function manidora_islandora_collectioncmodel_islandora_view_object(AbstractObject $object) {
  // XXX: Seems counter-intuitive to set into the $_GET parameters, but that's
  // how Solr takes 'em.
  $_GET['f'] = array(
    format_string('!field_one:"!pid" OR !field_two:"info:fedora/!pid"', array(
      '!pid' => $object->id,
      '!field_one' => variable_get('manidora_collection_solr_field', 'RELS_EXT_isMemberOfCollection_uri_ms'),
      '!field_two' => variable_get('manidora_secondary_collection_solr_field', 'RELS_EXT_isMemberOf_uri_ms'),
    )),
  );

  // XXX: Maintain breadcrumbs. The Solr display tries to set 'em.
  $bc = drupal_set_breadcrumb();
  $output = array(
    'manidora_collection' => islandora_solr('*:*'),
  );
  drupal_set_breadcrumb($bc);

  return $output;
}

/**
 * Implements hook_process_theme().
 */
function manidora_process_islandora_large_image(&$variables) {
  // Override the default text for UofM.
  $islandora_object = $variables['islandora_object'];
  $variables['image_clip'] = "";
}

/**
 * Admin form for homepage thumbnails
 */
function manidora_homepage_thumbnail_admin($form, &$form_state){
  $form = array();
  $thumbnails = variable_get('manidora_thumbnail_pids',NULL);
  $headers = array('pid' => 'PID', 'image' => 'Preview','opers' => 'Operations');
  $options = array();
  if (!is_null($thumbnails) && strlen(trim($thumbnails))>0){
    $thumb_array = explode('~',$thumbnails);
    foreach($thumb_array as $uupid){
      $pid = urldecode($uupid);
      $options[] = array('pid' => $pid, 'image' => '<img style="width:63px;height:63px;" src="' . url('islandora/object/' . $pid . '/datastream/TN/view') . '" alt="thumbnail for ' . $pid . '"/>', 'opers' => l('Remove','admin/islandora/manidora/homepage/' . $pid . '/remove'));
    }
  }
    $form['manidora_homepage_thumbnails_add'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter the new pid here'),
      '#description' => t('To add a new image to the homepage, add the pid here'),
      '#length' => 30,
      '#maxlength' => 255,
      '#default_value' => '',
    );
    $form['manidora_homepage_thumbnails_add_btn'] = array(
      '#type' => 'submit',
      '#value' => 'Add',
    );
  
  
  $form['manidora_homepage_title'] = array(
    '#markup' => '<p><b>'.t('Homepage images') .'</b></p>',
  );
  if (count($options)>0){
    $form['manidora_homepage_thumbnails'] = array(
      '#type' => 'tableselect',
      '#title' => t('Homepage images'),
      '#description' => t('Holds the pids to rotate on the homepage'),
      '#multiple' => TRUE,
      '#options' => $options,
      '#empty' => t('There are no PIDs currently displayed on the homepage.'),
      '#header' => $headers,
    );
  } else {
    $form['manidora_homepage_thumbnails'] = array(
      '#title' => t('Homepage images'),
      '#description' => t('Holds the pids to rotate on the homepage'),
      '#markup' => '<p>' . t('There are no images currently displayed on the homepage, add one below') . '</p>',
    );
  }

  return $form;
}

/**
 * Validate the PID entered to be added to the homepage
 */
function manidora_homepage_thumbnail_admin_validate($form, &$form_state){
  $thumbnails = variable_get('manidora_thumbnail_pids');
  $pids = array();
  if (!is_null($thumbnails)){
    $pids = explode('~',$thumbnails);
  }
  $newpid = $form_state['values']['manidora_homepage_thumbnails_add'];
  if (strlen(trim($newpid)) > 0 && preg_match('/^\w+:\w+$/',$newpid)){
    if (in_array(urlencode($newpid),$pids)){
      form_error($form,t('This image is already included on the homepage'));
    }
    try {
      $fedora_object = islandora_object_load($newpid);
      if (!is_a($fedora_object,'IslandoraFedoraObject')){
        form_error($form,t('Cannot load this PID, please ensure it is in the Fedora Repository.'));
      } else {
        $tn = $fedora_object->getDatastream('TN');
        ob_start();
        print_r($tn);
        $v = ob_get_clean();
        watchdog('Manidora','datastream <pre>%V</pre>',array('%V'=>$v));
        if (!$tn){
          form_error($form,t('PID (' . $newpid . ') does not have a TN datastream.'));
        }
      }
    } catch (Exception $e){
      watchdog('Manidora','Homepage Thumbnail PID error (%e)',array('%e'=>$e->getMessage));
      form_error($form,t('This PID seems invalid (' . $e->getMessage() . ')'));
    }
    
  } else {
    form_error($form,t('The PID must be of the correct format'));
  }
}
/**
 * Submit the Homepage Image addition
 */
function manidora_homepage_thumbnail_admin_submit($form, &$form_state){
  $thumbnails = variable_get('manidora_thumbnail_pids',"");
  if (strlen($thumbnails)>0){
    $thumbnails .= '~';
  }
  $thumbnails .= urlencode($form_state['values']['manidora_homepage_thumbnails_add']);
  variable_set('manidora_thumbnail_pids',$thumbnails);
  drupal_set_message(t('PID added successfully'),'status',FALSE);
}

/**
 * Remove PID from homepage collage
 */
function manidora_homepage_thumbnail_remove($pid = ""){
  if (strlen($pid)>0){
    $thumbnails = variable_get('manidora_thumbnail_pids',"");
     if (strlen($thumbnails)>0){
       $thumbs = explode('~',$thumbnails);
       $newThumbs = array_filter($thumbs,create_function('$v','$pid = "' . $pid . '"; return ($v != urlencode($pid));'));
       $thumbnails = implode('~',$newThumbs);
     }
     variable_set('manidora_thumbnail_pids',$thumbnails);
     drupal_set_message(t('Image ' . $pid . ' removed'),'status',FALSE);
  }
  drupal_goto('admin/islandora/manidora/homepage');
}

/**
 * Retrieves and renders PBCORE metadata.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return string
 *   The PBCORE metadata markup to be displayed.
 */
function manidora_pbcore_metadata($object) {
  $pbcore_metadata = drupal_get_form('PBCORE Display', $object['PBCORE']->content);
  return drupal_render($pbcore_metadata);
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function manidora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'manidora');
  return array(
    'PBCORE Display' => array(
      'form_file' => "$module_path/xml/forms/pbcore_display.xml",
    ),
  );
}

